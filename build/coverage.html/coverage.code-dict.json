{"/home/travis/build/npmtest/node-npmtest-gitbook-cli/test.js":"/* istanbul instrument in package npmtest_gitbook_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gitbook-cli/lib.npmtest_gitbook_cli.js":"/* istanbul instrument in package npmtest_gitbook_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gitbook_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gitbook_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gitbook-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gitbook-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gitbook_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gitbook_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gitbook_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gitbook_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gitbook_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gitbook_cli.__dirname + '/lib.npmtest_gitbook_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gitbook-cli/node_modules/gitbook-cli/bin/gitbook.js":"#! /usr/bin/env node\n\nvar Q = require('q');\nvar _ = require('lodash');\nvar path = require('path');\nvar program = require('commander');\nvar parsedArgv = require('optimist').argv;\nvar color = require('bash-color');\n\nvar pkg = require('../package.json');\nvar manager = require('../lib');\nvar tags = require('../lib/tags');\nvar commands = require('../lib/commands');\n\n// Which book is concerned?\nvar bookRoot = parsedArgv._[1] || process.cwd();\n\nfunction runPromise(p) {\n    return p\n    .then(function() {\n        process.exit(0);\n    }, function(err) {\n        console.log('');\n        console.log(color.red(err.toString()));\n        if (program.debug || process.env.DEBUG) console.log(err.stack || '');\n        process.exit(1);\n    });\n}\n\nfunction printGitbookVersion(v) {\n    var actualVersion = (v.name != v.version)? ' ('+v.version+')' : '';\n    return v.name + actualVersion;\n}\n\n// Init gitbook-cli\nmanager.init();\n\nprogram\n    .option('-v, --gitbook [version]', 'specify GitBook version to use')\n    .option('-d, --debug', 'enable verbose error')\n    .option('-V, --version', 'Display running versions of gitbook and gitbook-cli', function() {\n        console.log('CLI version:', pkg.version);\n        runPromise(\n            manager.ensure(bookRoot, program.gitbook)\n            .then(function(v) {\n                console.log('GitBook version:', printGitbookVersion(v));\n                process.exit(0);\n            })\n        );\n    });\n\nprogram\n    .command('ls')\n    .description('List versions installed locally')\n    .action(function(){\n        var versions = manager.versions();\n\n        if (versions.length > 0) {\n            console.log('GitBook Versions Installed:');\n            console.log('');\n\n            _.each(versions,function(v, i) {\n                var text = v.name;\n                if (v.name != v.version) text += ' [' + v.version + ']';\n                if (v.link) text = text + ' (alias of ' + v.link + ')';\n\n                console.log('   ', i == 0? '*' : ' ', text);\n            });\n            console.log('');\n            console.log('Run \"gitbook update\" to update to the latest version.');\n        } else {\n            console.log('There is no versions installed');\n            console.log('You can install the latest version using: \"gitbook fetch\"');\n        }\n    });\n\nprogram\n    .command('current')\n    .description('Display currently activated version')\n    .action(function(){\n        runPromise(\n            manager.ensure(bookRoot, program.gitbook)\n            .then(function(v) {\n                console.log('GitBook version is', printGitbookVersion(v));\n            })\n        );\n    });\n\nprogram\n    .command('ls-remote')\n    .description('List remote versions available for install')\n    .action(function(){\n        runPromise(\n            manager.available()\n            .then(function(available) {\n                console.log('Available GitBook Versions:');\n                console.log('');\n                console.log('    ', available.versions.join(', '));\n                console.log('');\n                console.log('Tags:');\n                console.log('');\n                _.each(available.tags, function(version, tagName) {\n                    console.log('    ', tagName, ':', version);\n                });\n                console.log('');\n            })\n        );\n    });\n\nprogram\n    .command('fetch [version]')\n    .description('Download and install a <version>')\n    .action(function(version){\n        version = version || '*';\n\n        runPromise(\n            manager.install(version)\n            .then(function(installedVersion) {\n                console.log('');\n                console.log(color.green('GitBook '+installedVersion+' has been installed'));\n            })\n        );\n    });\n\nprogram\n    .command('alias [folder] [version]')\n    .description('Set an alias named <version> pointing to <folder>')\n    .action(function(folder, version) {\n        folder = path.resolve(folder || process.cwd());\n        version = version || 'latest';\n\n        runPromise(\n            manager.link(version, folder)\n            .then(function() {\n                console.log(color.green('GitBook '+version+' point to '+folder));\n            })\n        );\n    });\n\nprogram\n    .command('uninstall [version]')\n    .description('Uninstall a version')\n    .action(function(version){\n        runPromise(\n            manager.uninstall(version)\n            .then(function() {\n                console.log(color.green('GitBook '+version+' has been uninstalled.'));\n            })\n        );\n    });\n\nprogram\n    .command('update [tag]')\n    .description('Update to the latest version of GitBook')\n    .action(function(tag){\n        runPromise(\n            manager.update(tag)\n            .then(function(version) {\n                if (!version) {\n                    console.log('No update found!');\n                } else {\n                    console.log('');\n                    console.log(color.green('GitBook has been updated to '+version));\n                }\n            })\n        );\n    });\n\nprogram\n    .command('help')\n    .description('List commands for GitBook')\n    .action(function(){\n        runPromise(\n            manager.ensureAndLoad(bookRoot, program.gitbook)\n            .get('commands')\n            .then(commands.help)\n        );\n    });\n\nprogram\n    .command('*')\n    .description('run a command with a specific gitbook version')\n    .action(function(commandName){\n        var args = parsedArgv._.slice(1);\n        var kwargs = _.omit(parsedArgv, '$0', '_');\n\n        runPromise(\n            manager.ensureAndLoad(bookRoot, program.gitbook)\n            .then(function(gitbook) {\n                return commands.exec(gitbook.commands, commandName, args, kwargs);\n            })\n        );\n    });\n\n// Parse and fallback to help if no args\nif(_.isEmpty(program.parse(process.argv).args) && process.argv.length === 2) {\n    program.help();\n}\n","/home/travis/build/npmtest/node-npmtest-gitbook-cli/node_modules/gitbook-cli/lib/index.js":"var Q = require('q');\nvar _ = require('lodash');\nvar path = require('path');\n\nvar config = require('./config');\nvar local = require('./local');\nvar registry = require('./registry');\nvar tags = require('./tags');\n\n// Return book version (string) required by a book\nfunction bookVersion(bookRoot) {\n    var version;\n\n    try {\n        var bookJson = require(path.resolve(bookRoot, 'book'));\n        version = bookJson.gitbook;\n    } catch (e) {\n        if (e.code != 'MODULE_NOT_FOUND') throw e;\n    }\n\n    return version || '*';\n}\n\n// Ensure that a version exists\n// or install it\nfunction ensureVersion(bookRoot, version, opts) {\n    opts = _.defaults(opts || {}, {\n        install: true\n    });\n\n    return Q()\n\n    // If not defined, load version required from book.json\n    .then(function() {\n        if (version) return version;\n        return bookVersion(bookRoot);\n    })\n\n    // Resolve version locally\n    .then(function(_version) {\n        version = _version;\n        return local.resolve(version)\n        // Install if needed\n        .fail(function(err) {\n            if (!opts.install) throw err;\n\n            return registry.install(version)\n            .then(function() {\n                return ensureVersion(bookRoot, version, {\n                    install: false\n                });\n            });\n        });\n    });\n}\n\n// Get version in a book\nfunction getVersion(bookRoot, version) {\n    return ensureVersion(bookRoot, version, {\n        install: false\n    });\n}\n\n// Ensure a version exists (or install it)\n// Then load it and returns the gitbook instance\nfunction ensureAndLoad(bookRoot, version, opts) {\n    return ensureVersion(bookRoot, version, opts)\n    .then(function(version) {\n        return local.load(version);\n    });\n}\n\n// Update current version\n//   -> Check that a newer version exists\n//   -> Install it\n//   -> Remove previous version\nfunction updateVersion(tag) {\n    tag = tag || 'latest';\n\n    return getVersion(null, {\n        install: false\n    })\n    .fail(function(err) {\n        return Q(null);\n    })\n    .then(function(currentV) {\n        return registry.versions()\n        .then(function(result) {\n            var remoteVersion = result.tags[tag];\n            if (!remoteVersion) throw new Error('Tag doesn\\'t exist: '+tag);\n\n            if (currentV && tags.sort(remoteVersion, currentV.version) >= 0) return null;\n\n            return registry.install(remoteVersion)\n            .then(function() {\n                if (!currentV) return;\n                return local.remove(currentV.tag);\n            })\n            .thenResolve(remoteVersion);\n        });\n    });\n}\n\nmodule.exports = {\n    init: config.init,\n    setRoot: config.setRoot,\n\n    load: local.load,\n    get: getVersion,\n    getBookVersion: bookVersion,\n    ensure: ensureVersion,\n    ensureAndLoad: ensureAndLoad,\n    uninstall: local.remove,\n    link: local.link,\n    versions: local.versions,\n\n    update: updateVersion,\n\n    install: registry.install,\n    available: registry.versions\n};\n","/home/travis/build/npmtest/node-npmtest-gitbook-cli/node_modules/gitbook-cli/lib/config.js":"var path = require('path');\nvar fs = require('fs-extra');\nvar color = require('bash-color');\nvar userHome = require('user-home');\n\nvar CONFIG_ROOT = process.env.GITBOOK_DIR;\nif (!CONFIG_ROOT) {\n    if (!userHome) {\n        console.log(color.red('HOME or GITBOOK_DIR needs to be defined'));\n        process.exit(1);\n    }\n\n    CONFIG_ROOT = path.resolve(userHome, '.gitbook');\n}\nvar VERSIONS_ROOT = path.resolve(CONFIG_ROOT, 'versions');\n\n\n// Init and prepare configuration for gitbook-cli\n// It creates the required folder\nfunction init() {\n    fs.mkdirsSync(CONFIG_ROOT);\n    fs.mkdirsSync(VERSIONS_ROOT);\n}\n\n// Replace root folder to use\nfunction setRoot(root) {\n    CONFIG_ROOT = path.resolve(root);\n    VERSIONS_ROOT = path.resolve(CONFIG_ROOT, 'versions');\n\n    module.exports.ROOT = CONFIG_ROOT;\n    module.exports.VERSIONS_ROOT = VERSIONS_ROOT;\n}\n\nmodule.exports = {\n    init: init,\n    setRoot: setRoot,\n\n    GITBOOK_VERSION: '>1.x.x',\n    ROOT: CONFIG_ROOT,\n    VERSIONS_ROOT: VERSIONS_ROOT\n};\n","/home/travis/build/npmtest/node-npmtest-gitbook-cli/node_modules/gitbook-cli/lib/local.js":"var Q = require('q');\nvar fs = require('fs-extra');\nvar path = require('path');\nvar _ = require('lodash');\nvar npmi = require('npmi');\nvar npm = require('npm');\nvar tmp = require('tmp');\nvar color = require('bash-color');\nvar parsedArgv = require('optimist').argv;\n\nvar config = require('./config');\nvar tags = require('./tags');\n\n// Return a list of all available versions on this system\nfunction listVersions() {\n    var folders = fs.readdirSync(config.VERSIONS_ROOT);\n    var latest = null;\n\n    return _.chain(folders)\n        .map(function(tag) {\n            // Verison matches requirements?\n            if (!tags.isValid(tag)) return null;\n\n            // Read package.json to determine version\n            var versionFolder = path.resolve(config.VERSIONS_ROOT, tag);\n            var stat = fs.lstatSync(versionFolder);\n            var pkg;\n\n            try {\n                pkg = require(path.resolve(versionFolder, 'package.json'));\n            } catch(e) {\n                return null;\n            }\n\n            // Is it gitbook?\n            if (pkg.name != 'gitbook') return null;\n\n            return {\n                // The name associated in the folder\n                name: tag,\n\n                // The real absolute version\n                version: pkg.version,\n\n                // Location of this version\n                path: versionFolder,\n\n                // Location if it's a symlink\n                link: stat.isSymbolicLink()? fs.readlinkSync(versionFolder) : null,\n\n                // Type of release, latest, beta, etc ?\n                tag: tags.getTag(pkg.version)\n            };\n        })\n        .compact()\n\n        // Sort by the version\n        .sort(function(a, b) {\n            return tags.sort(a.version, b.version);\n        })\n        .value();\n}\n\n// Return path to a specific version\nfunction versionRoot(version) {\n    return path.resolve(config.VERSIONS_ROOT, version);\n}\n\n// Resolve a version using a condition\nfunction resolveVersion(condition) {\n    var versions = listVersions();\n    var version = _.chain(versions)\n        .find(function(v) {\n            return tags.satisfies(v.name, condition);\n        })\n        .value();\n\n    if (!version) return Q.reject(new Error('No version match: '+condition));\n    return Q(version);\n}\n\n// Remove an installed version of gitbook\nfunction removeVersion(version) {\n    if (!version) return Q.reject(new Error('No version specified'));\n    var outputFolder = versionRoot(version);\n\n    return Q.nfcall(fs.lstat.bind(fs), outputFolder)\n    .then(function(stat) {\n        if (stat.isSymbolicLink()) {\n            return Q.nfcall(fs.unlink.bind(fs), outputFolder);\n        }\n        return Q.nfcall(fs.remove.bind(fs), outputFolder);\n    });\n}\n\n// Load a gitbook version\nfunction loadVersion(version) {\n    return Q(_.isString(version)? resolveVersion(version) : version)\n    .then(function(resolved) {\n        var gitbook;\n\n        try {\n            gitbook = require(resolved.path);\n        } catch (err) {\n            console.log(color.red('Error loading version '+resolved.tag+': '+(err.stack || err.message || err)));\n            return null;\n        }\n\n        if (!gitbook) throw new Error('GitBook Version '+resolved.tag+' is corrupted');\n        return gitbook;\n    });\n}\n\n// Link a folder to a tag\nfunction linkVersion(name, folder) {\n    if (!name) return Q.reject(new Error('Require a name to represent this GitBook version'));\n    if (!folder) return Q.reject(new Error('Require a folder'));\n    var outputFolder = versionRoot(name);\n\n    return Q.nfcall(fs.symlink.bind(fs), folder, outputFolder);\n}\n\nmodule.exports = {\n    load: loadVersion,\n    resolve: resolveVersion,\n    versions: listVersions,\n    remove: removeVersion,\n    link: linkVersion\n};\n","/home/travis/build/npmtest/node-npmtest-gitbook-cli/node_modules/gitbook-cli/lib/tags.js":"var _ = require('lodash');\nvar semver = require('semver');\nvar config = require('./config');\n\nvar ALLOWED_TAGS = ['latest', 'pre', 'beta', 'alpha'];\n\n// Returns true if a version is a tag\nfunction isTag(version) {\n    return _.includes(ALLOWED_TAGS, version);\n}\n\n// Return true if a version matches gitbook-cli's requirements\nfunction isValid(version) {\n    if (isTag(version)) return true;\n\n    var versionWithoutPre = version.replace(/\\-(\\S+)/g, '');\n\n    try {\n        return semver.satisfies(versionWithoutPre, config.GITBOOK_VERSION);\n    } catch(e) {\n        return false;\n    }\n}\n\n// Extract prerelease tag from a version\nfunction getTag(version) {\n    if (isTag(version)) return version;\n\n    var v = semver.parse(version);\n    return v.prerelease[0] || 'latest';\n}\n\n// Sort versions (tale prerelease tags in consideration)\nfunction sortTags(a, b) {\n    if (isTag(a) && isTag(b)) {\n        var indexA = ALLOWED_TAGS.indexOf(a);\n        var indexB = ALLOWED_TAGS.indexOf(b);\n\n        if (indexA > indexB) return -1;\n        if (indexB > indexA) return 1;\n\n        return 0;\n    }\n    if (isTag(a)) return -1;\n    if (isTag(b)) return 1;\n\n    if (semver.gt(a, b)) {\n        return -1;\n    }\n    if (semver.lt(a, b)) {\n        return 1;\n    }\n    return 0;\n}\n\n// Returns true if a version satisfies a condition\nfunction satisfies(version, condition, opts) {\n    opts = _.defaults(opts || {}, {\n        acceptTagCondition: true\n    });\n\n    if (isTag(version)) {\n        return (condition == '*' || version == condition);\n    }\n\n    // Condition is a tag ('beta', 'latest')\n    if (opts.acceptTagCondition) {\n        var tag = getTag(version);\n        if (tag == condition) return true;\n    }\n\n    return semver.satisfies(version, condition);\n}\n\nmodule.exports = {\n    isTag: isTag,\n    isValid: isValid,\n    sort: sortTags,\n    satisfies: satisfies,\n    getTag: getTag\n};\n","/home/travis/build/npmtest/node-npmtest-gitbook-cli/node_modules/gitbook-cli/lib/registry.js":"var Q = require('q');\nvar fs = require('fs-extra');\nvar npmi = require('npmi');\nvar npm = require('npm');\nvar tmp = require('tmp');\nvar _ = require('lodash');\nvar path = require('path');\n\nvar tags = require('./tags');\nvar config = require('./config');\n\n// Initialize NPM before usage\nvar initNPM = _.memoize(function() {\n    return Q.nfcall(npm.load, {\n        silent: true,\n        loglevel: 'silent'\n    });\n});\n\n// Return a list of versions available in the registry (npm)\nfunction availableVersions() {\n    return initNPM()\n    .then(function() {\n        return Q.nfcall(npm.commands.view, ['gitbook', 'versions', 'dist-tags'], true);\n    })\n    .then(function(result) {\n        result = _.chain(result).values().first().value();\n        result = {\n            versions: _.chain(result.versions)\n                .filter(function(v) {\n                    return tags.isValid(v);\n                })\n                .sort(tags.sort)\n                .value(),\n            tags: _.chain(result['dist-tags'])\n                .omit(function(tagVersion, tagName) {\n                    return !tags.isValid(tagVersion);\n                })\n                .value()\n        };\n\n        if (result.versions.length == 0) throw new Error('No valid version on the NPM registry');\n        return result;\n    });\n}\n\n// Resolve a version name or tag to an installable absolute version\nfunction resolveVersion(version) {\n    var _version = version;\n\n    return availableVersions()\n    .then(function(available) {\n        // Resolve if tag\n        if (available.tags[version]) version = available.tags[version];\n\n        version = _.find(available.versions, function(v) {\n            return tags.satisfies(v, version, {\n                // Tag is resolved from npm dist-tags\n                acceptTagCondition: false\n            });\n        });\n\n        // Check version\n        if (!version) throw new Error('Invalid version or tag \"'+_version+'\", see available using \"gitbook ls-remote\"');\n        return version;\n    });\n}\n\n// Install a specific version of gitbook\nfunction installVersion(version, forceInstall) {\n    return resolveVersion(version)\n    .then(function(_version) {\n        version = _version;\n        return Q.nfcall(tmp.dir.bind(tmp));\n    })\n    .spread(function(tmpDir) {\n        var options = {\n            name: 'gitbook',\n            version: version,\n            path: tmpDir,\n            forceInstall: !!forceInstall,\n            npmLoad: {\n                loglevel: 'silent',\n                loaded: false,\n                prefix: tmpDir\n            }\n        };\n        console.log('Installing GitBook', version);\n        return Q.nfcall(npmi.bind(npmi), options).thenResolve(tmpDir);\n    })\n    .then(function(tmpDir) {\n        var gitbookRoot = path.resolve(tmpDir, 'node_modules/gitbook');\n        var packageJson = fs.readJsonSync(path.resolve(gitbookRoot, 'package.json'));\n        var version = packageJson.version;\n\n        var outputFolder = path.resolve(config.VERSIONS_ROOT, version);\n\n        if (!tags.isValid(version)) throw 'Invalid GitBook version, should satisfies '+config.GITBOOK_VERSION;\n\n        // Copy to the install folder\n        return Q.nfcall(fs.copy.bind(fs), gitbookRoot, outputFolder)\n        .thenResolve(version);\n    });\n}\n\nmodule.exports = {\n    versions: availableVersions,\n    resolve: resolveVersion,\n    install: installVersion\n};\n","/home/travis/build/npmtest/node-npmtest-gitbook-cli/node_modules/gitbook-cli/lib/commands.js":"var _ = require('lodash');\n\n// Helper function for print help\n// indented output by spaces\nfunction indent_output(n, name, description) {\n    if (!n) {\n        n = 0;\n    }\n    \n    console.log(\n        _.repeat('    ', n)\n        + name\n        + _.repeat(' ', 32 - n * 4 - name.length)\n        + description\n    );\n}\n\n// Print help for a list of commands\n// It prints the command and its description, then all the options\nfunction help(commands) {\n    _.each(commands, function(command) {\n        indent_output(1, command.name, command.description);\n        _.each(command.options || [], function(option) {\n            var after = [];\n\n            if (option.defaults !== undefined) after.push(\"Default is \"+option.defaults);\n            if (option.values) after.push(\"Values are \"+option.values.join(\", \"));\n\n            if (after.length > 0) after = \"(\"+after.join(\"; \")+\")\";\n            else after = \"\";\n\n            var optname = '--';\n            if (typeof option.defaults === 'boolean') optname += '[no-]';\n            optname += option.name;\n            indent_output(2, optname, option.description + ' ' + after);\n        });\n        console.log('');\n    });\n}\n\n// Execute a command from a list\n// with a specific set of args/kwargs\nfunction exec(commands, command, args, kwargs) {\n    var cmd = _.find(commands, function(_cmd) {\n        return _.first(_cmd.name.split(\" \")) == command;\n    });\n\n    // Command not found\n    if (!cmd) throw new Error('Command '+command+' doesn\\'t exist, run \"gitbook help\" to list commands.');\n\n    // Apply defaults\n    _.each(cmd.options || [], function(option) {\n        kwargs[option.name] = (kwargs[option.name] === undefined)? option.defaults : kwargs[option.name];\n        if (option.values && !_.includes(option.values, kwargs[option.name])) {\n            throw new Error('Invalid value for option \"'+option.name+'\"');\n        }\n    });\n\n    return cmd.exec(args, kwargs);\n}\n\nmodule.exports = {\n    help: help,\n    exec: exec\n};\n"}